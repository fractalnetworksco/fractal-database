import secrets
import io
from unittest.mock import AsyncMock, MagicMock, patch

import pytest
from fractal_database.utils import get_project_name, use_django, init_poetry_project

FILE_PATH = "fractal_database.utils"


def test_utils_use_django_no_project_name():
    """ """

    @use_django
    async def test_use_django():
        """ """
        print("using django")


def test_utils_get_project_name_attribute_error():
    """ """

    with patch(f"{FILE_PATH}.settings", side_effect=AttributeError) as mock_settings:
        with patch(f"{FILE_PATH}.logger") as mock_logger:
            delattr(mock_settings, "PROJECT_NAME")
            proj = get_project_name()

    mock_logger.warning.assert_called_with(
        "settings.PROJECT_NAME is not set. Defaulting to settings.BASE_DIR"
    )


def test_utils_get_project_name_no_error():
    """ """

    expected_name = secrets.token_hex(8)
    with patch(f"{FILE_PATH}.settings") as mock_settings:
        mock_settings.PROJECT_NAME = expected_name
        with patch(f"{FILE_PATH}.logger") as mock_logger:
            proj = get_project_name()
    
    assert proj == expected_name
    mock_logger.assert_not_called()

@pytest.mark.skip(reason='')
def test_utils_init_poetry_project_in_memory():
    """
    """
    
    project_name = secrets.token_hex(8)

    test_pyproject_toml = f"""\
    [build-system]
    requires = [ "poetry-core",]
    build-backend = "poetry.core.masonry.api"

    [tool.poetry]
    name = "{project_name}"
    version = "0.1.0"
    authors = ["FIX ME <email@email.com>"]
    description = "Generated by Fractal Networks"

    [tool.fractal]

    [tool.poetry.dependencies]
    python = "^3.11"
    django = ">=4.0.0"
    fractal-database = ">=0.0.1"

    [tool.poetry.plugins."fractal.database.app"]
    "{project_name}" = "{project_name}"
    """
    print('testpyproj=================', test_pyproject_toml)
    # import pdb; pdb.set_trace()

    expected_return = io.BytesIO(test_pyproject_toml.encode('utf-8'))

    with patch(f"{FILE_PATH}.open") as mock_open:
        returned_pyproject_toml = init_poetry_project(project_name=project_name, in_memory=True)

    mock_open.assert_not_called()
    assert returned_pyproject_toml == expected_return
